@code_tooltip_harvest = `harvest()`
드론 아래에 있는 개체를 수확해요. 
수확할 수 없는 개체를 수확하면 파괴돼요.

개체가 제거되면 `True`를, 그렇지 않으면 `False`를 반환해요.

개체가 제거된 경우 `200` ticks, 그렇지 않으면 `1` tick이 걸려요.

예시:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
작물이 다 자랐는지 확인할 때 사용해요.

드론 아래에 수확할 준비가 된 개체가 있으면 `True`를, 그렇지 않으면 `False`를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range(start = 0, end, step = 1)`
`start`에서 시작해서 `end`에 도달하기 직전까지(`end`는 제외) `step` 크기만큼 건너뛰며 숫자 시퀀스를 생성해요.

start는 기본적으로 `0`으로 설정되며, 인수가 하나만 주어지면 `end`에 할당돼요. 이건 보통은 불가능해요.
Python에서 `range`는 이런 이상한 동작을 허용하는 클래스 생성자예요.

실행하는 데 `1` tick이 걸려요.

예시:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)` 
지정된 `entity`의 비용을 지불하고 드론 아래에 심어요.
비용이 부족하거나, 땅 종류가 틀리거나, 이미 식물이 심어져 있으면 실패해요.

성공하면 `True`를, 그렇지 않으면 `False`를 반환해요.

성공하면 `200` ticks, 그렇지 않으면 `1` tick이 걸려요.

예시:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
드론을 지정된 `direction`으로 한 칸 이동시켜요.
드론이 농장 가장자리 밖으로 이동하면 반대편으로 돌아와요.

`East `  =  오른쪽
`West `  =  왼쪽
`North`  =  위
`South`  =  아래

드론이 움직였으면 `True`를, 그렇지 않으면 `False`를 반환해요.

드론이 움직였으면 `200` ticks, 그렇지 않으면 `1` tick이 걸려요.

예시:
`move(North)`
@code_tooltip_can_move() = `can_move(direction)`
드론이 지정된 `direction`으로 이동할 수 있는지 확인해요.

드론이 움직일 수 있으면 `True`를, 그렇지 않으면 `False`를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`if can_move(North):
    move(North)`
@code_tooltip_swap = `swap(direction)`
드론 아래에 있는 개체와 지정된 `direction`에 있는 옆 개체를 맞바꿔요.
모든 개체에 작동하는 것은 아니에요.
개체 중 하나(또는 둘 다)가 `None`인 경우에도 작동해요.

성공하면 `True`를, 그렇지 않으면 `False`를 반환해요.

성공하면 `200` ticks, 그렇지 않으면 `1` tick이 걸려요.

예시:
`swap(North)`
@code_tooltip_till = `till()` 
드론 아래의 땅을 `Grounds.Soil`로 갈아요. 이미 흙이라면 땅을 다시 `Grounds.Grassland`로 바꿔요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()` 
드론의 현재 x 위치를 가져와요.
x 위치는 서쪽에서 `0`으로 시작해서 동쪽 방향으로 증가해요.

드론의 현재 x 좌표를 나타내는 숫자를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()` 
드론의 현재 y 위치를 가져와요.
y 위치는 남쪽에서 `0`으로 시작해서 북쪽 방향으로 증가해요.

드론의 현재 y 좌표를 나타내는 숫자를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()` 
농장의 현재 크기를 가져와요.

그리드의 남북 방향 길이를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()` 
드론 아래에 어떤 종류의 개체가 있는지 알아내요.

타일이 비어 있으면 `None`을 반환하고, 그렇지 않으면 드론 아래에 있는 개체의 종류를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()` 
드론 아래에 어떤 종류의 땅이 있는지 알아내요.

드론 아래에 있는 땅의 종류를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()` 
현재 게임 시간을 가져와요.

게임 시작 후 지난 시간을 초 단위로 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_tick_count = `get_tick_count()`
수행된 tick 수를 측정하는 데 사용돼요.

실행 시작 후 수행된 tick 수를 반환해요.

실행하는 데 `0` tick이 걸려요.

예시:
`do_something()

print(get_tick_count())`
@code_tooltip_use_item = `use_item(item, n=1)` 
지정된 `item`을 `n`번 사용하려고 시도해요. `Items.Water`, `Items.Fertilizer`를 포함한 일부 아이템에만 사용할 수 있어요.

아이템이 사용되면 `True`를, 그렇지 않으면 `False`를 반환해요.

성공하면 `200` ticks, 그렇지 않으면 `1` tick이 걸려요.

예시:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()` 
드론 아래의 현재 물 수위를 가져와요.

드론 아래의 물 수위를 `0`과 `1` 사이의 숫자로 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`if get_water() < 0.5:
    use_item(Items.Water)`
@code_tooltip_do_a_flip = `do_a_flip()` 
드론이 재주를 넘어요! 이 동작은 속도 업그레이드의 영향을 받지 않아요.

`None`을 반환해요

실행하는 데 1초가 걸려요.

예시:
`while True:
    do_a_flip()`
@code_tooltip_pet_the_piggy = `pet_the_piggy()` 
돼지를 쓰다듬어요! 이 동작은 속도 업그레이드의 영향을 받지 않아요.

`None`을 반환해요

실행하는 데 1초가 걸려요.

예시:
`while True:
    pet_the_piggy()`
@code_tooltip_print = `print(*args)` 
연기를 사용해서 드론 위 공중에 모든 `args`를 출력해요. 이 동작은 속도 업그레이드의 영향을 받지 않아요.
여러 값을 한 번에 출력할 수 있어요.

`None`을 반환해요

실행하는 데 1초가 걸려요.

예시:
`print("ground:", get_ground_type())`
@code_tooltip_len = `len(collection)` 
리스트, 세트, 딕셔너리 또는 튜플의 요소 수를 가져와요.

`collection`의 길이를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list(collection = None)`
새로운 리스트를 만들어요. 
`dictionary`가 None이면 빈 딕셔너리를 만들어요.
`dictionary`가 딕셔너리이면 그 복사본을 만들어요.

리스트를 반환해요.

실행하는 데 `1 + len(collection)` ticks가 걸려요.

예시:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict(dictionary = None)`
새로운 딕셔너리를 만들어요.
`dictionary`가 None이면 빈 딕셔너리를 만들어요.
`dictionary`가 딕셔너리이면 그 복사본을 만들어요.

딕셔너리를 반환해요.

실행하는 데 `1 + len(dictionary)` ticks가 걸려요.

예시:
`new_dict = dict()`
@code_tooltip_set = `set(collection = None)`
새로운 세트를 만들어요.
`collection`이 None이면 빈 세트를 만들어요.
`collection`이 값들의 컬렉션이면 그 값들을 담은 새 세트를 만들어요.

세트를 반환해요.

실행하는 데 `1 + len(collection)` ticks가 걸려요.

예시:
`new_set = set((1,2,3))`
@code_tooltip_str = `str(object)`

`object`의 문자열 표현을 반환해요.

실행하는 데 `1` ticks가 걸려요.

예시:
`string = str(1000)`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
무슨 일이 일어나는지 더 잘 볼 수 있도록 프로그램 실행 속도를 제한해요.

`speed`가 `1`이면 속도 업그레이드가 전혀 없는 드론의 속도예요.
`speed`가 `10`이면 코드가 `10`배 빠르게 실행되며 `9`번의 속도 업그레이드 후의 드론 속도에 해당해요.
`speed`가 `0.5`이면 속도 업그레이드가 없을 때의 절반 속도로 코드가 실행돼요. 코드가 무엇을 하는지 볼 때 유용할 수 있어요.

`speed`가 현재 실행할 수 있는 속도보다 빠르면 그냥 최대 속도로 실행돼요.

`speed`가 `0`이거나 음수이면 속도는 다시 최대 속도로 변경돼요.
이 효과는 실행이 멈추면 사라져요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`set_execution_speed(1)`
@code_tooltip_set_world_size = `set_world_size(size)`
무슨 일이 일어나는지 더 잘 볼 수 있도록 농장 크기를 제한해요.
또한 농장을 비우고 드론 위치를 초기화해요.
농장을 `size` x `size` 그리드로 설정해요.
가능한 가장 작은 `size`는 `3`이에요.
`size`가 `3`보다 작으면 그리드가 다시 원래 크기로 돌아가요.
이 효과는 실행이 멈추면 사라져요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`set_world_size(5)`
@code_tooltip_num_items = `num_items(item)` 
현재 `item`을 얼마나 가지고 있는지 알아내요.

인벤토리에 있는 `item`의 수를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`if num_items(Items.Fertilizer) > 0:
    use_item(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)` 
`thing`의 비용을 가져와요

`thing`이 개체이면 심는 비용을 가져와요.
`thing`이 해금 요소이면 해금하는 비용을 가져와요.

아이템을 키로, 숫자를 값으로 갖는 딕셔너리를 반환해요. 각 아이템은 필요한 양에 매핑돼요.
이미 최대 레벨인 업그레이드 가능한 해금 요소에 사용하면 `{}`를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("not enough items to unlock carrots")`
@code_tooltip_clear = `clear()` 
농장에서 모든 것을 제거하고, 드론을 위치 `(0,0)`으로 되돌리고, 모자를 다시 밀짚모자로 바꿔요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`clear()`
@code_tooltip_get_companion = `get_companion()` 
드론 아래 식물의 선호 동반 식물을 가져와요.

`(companion_type, (companion_x_position, companion_y_position))` 형태의 튜플을 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`companion = get_companion()
if companion != None:
	print(companion)`
@code_tooltip_unlock = `unlock(unlock)` 
연구 트리에서 `unlock`에 해당하는 버튼을 클릭하는 것과 완전히 똑같은 효과를 가져요.

해금이 성공하면 `True`를, 그렇지 않으면 `False`를 반환해요.

성공하면 `200` ticks, 그렇지 않으면 `1` tick이 걸려요.

예시:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
해금 요소, 개체, 땅 또는 아이템이 이미 해금되었는지 확인하는 데 사용돼요.

`thing`이 업그레이드 가능하면 `1`에 `thing`이 업그레이드된 횟수를 더한 값을 반환해요. 그렇지 않으면 `thing`이 해금되었으면 `1`을, 아니면 `0`을 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`plant(Entities.Bush)
n_substance = get_world_size() * num_unlocked(Unlocks.Mazes)
use_item(Items.Weird_Substance, n_substance)`
@code_tooltip_reset = `reset()` 
농장을 1x1 정사각형으로 되돌리고, 모든 자원을 제거하고, 대부분의 해금 요소를 잠가요.
코드는 제거되지 않아요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`reset()`
@code_tooltip_measure = `measure(direction = None)` 
일부 개체의 일부 값을 측정할 수 있어요. 이 효과는 개체에 따라 달라져요.

`direction`이 `None`이 아니면 주어진 방향의 이웃 개체를 측정해요.

해바라기의 꽃잎 수를 반환해요.
보물이나 사과의 다음 위치를 반환해요.
선인장의 크기를 반환해요.
호박에 대한 신비한 숫자를 반환해요.
다른 모든 개체에 대해서는 `None`을 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`num_petals = measure()`
@code_tooltip_leaderboard_run = `leaderboard_run(leaderboard, file_name, speedup)`
지정된 `file_name`을 시작점으로 사용하여 `leaderboard`에 대한 시간 측정 시뮬레이션을 시작해요.
`speedup`은 시작 속도를 설정해요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`leaderboard_run(Leaderboards.Fastest_Reset, "full_run", 256)`
@code_tooltip_simulate = `simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
지정된 `filename`을 시작점으로 사용하여 리더보드용 시뮬레이션을 시작해요.

`sim_unlocks`: 시작 해금 요소를 포함하는 시퀀스.
`sim_items`: 아이템을 양에 매핑하는 딕셔너리. 시뮬레이션은 이 아이템들로 시작해요.
`sim_globals`: 변수 이름을 값에 매핑하는 딕셔너리. 시뮬레이션은 이 변수들을 전역 범위에 두고 시작해요.
`seed`: 시뮬레이션의 랜덤 시드. 양의 정수여야 해요.
`speedup`: 시작 속도.

시뮬레이션 실행에 걸린 시간을 반환해요.

실행하는 데 `200` ticks가 걸려요.

예시:
`filename = "f1"
sim_unlocks = Unlocks
sim_items = {Items.Carrot : 10000, Items.Hay : 50}
sim_globals = {"a" : 13}
seed = 0
speedup = 64

run_time = simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
@code_tooltip_spawn_drone = `spawn_drone(filename)`
`spawn_drone(function)` 명령을 실행한 드론과 같은 위치에 새 드론을 생성해요. 새 드론은 지정된 함수를 실행하기 시작해요. 끝나면 자동으로 사라져요.

새 드론의 핸들을 반환하거나, 모든 드론이 이미 생성된 경우 `None`을 반환해요.

드론이 생성되면 `200` ticks, 그렇지 않으면 `1`이 걸려요.

예시:
`def harvest_column():
    for _ in range(get_world_size()):
        harvest()
        move(North)

while True:
    if spawn_drone(harvest_column):
        move(East)`
@code_tooltip_wait_for = `wait_for(drone)`
주어진 `drone`이 종료될 때까지 기다려요.

`drone`이 실행하던 함수의 반환값을 반환해요.

기다리는 `drone`이 이미 완료된 경우 실행하는 데 `1` tick이 걸려요.

예시:
`def get_entity_type_in_direction(dir):
    move(dir)
    return get_entity_type()

def zero_arg_wrapper():
    return get_entity_type_in_direction(North)
handle = spawn_drone(zero_arg_wrapper)
print(wait_for(handle))`
@code_tooltip_max_drones = `max_drones()`

농장에 가질 수 있는 최대 드론 수를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`
@code_tooltip_num_drones = `num_drones()`

현재 농장에 있는 드론 수를 반환해요.

실행하는 데 `1` tick이 걸려요.

예시:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`
@code_tooltip_quick_print = `quick_print(*args)`
`print(*args)`와 똑같이 값을 출력하지만, 공중에 쓰기 위해 멈추지 않아서 출력 페이지에서만 찾을 수 있어요.

`None`을 반환해요

실행하는 데 `0` ticks가 걸려요.

예시:
`quick_print("hi mom")`
@code_tooltip_change_hat = `change_hat(hat)`
드론의 모자를 `hat`으로 바꿔요.

`None`을 반환해요

실행하는 데 `200` ticks가 걸려요.

예시:
`change_hat(Hats.Dinosaur_Hat)`
@code_tooltip_max = `max(*args)`
요소 시퀀스 또는 여러 전달된 인수 중 최댓값을 가져와요.
숫자와 문자열에 사용할 수 있어요.

`max(a,b,c)`: `a`, `b`, `c`의 최댓값을 반환해요.
`max(sequence)`: 시퀀스의 모든 값 중 최댓값을 반환해요.

실행하는 데 비교 횟수 ticks가 걸려요.

예시:
`max([3,6,34,16])`
@code_tooltip_min = `min(*args)`
요소 시퀀스 또는 여러 전달된 인수 중 최솟값을 가져와요.
숫자와 문자열에 사용할 수 있어요.

`min(a,b,c)`: `a`, `b`, `c`의 최솟값을 반환해요.
`min(sequence)`: 시퀀스의 모든 값 중 최솟값을 반환해요.

실행하는 데 비교 횟수 ticks가 걸려요.

예시:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
숫자의 절댓값을 계산해요.

`number`가 양수이면 `number`를, 그렇지 않으면 `-number`를 반환해요.

실행하는 데 1 tick이 걸려요.

예시:
`abs(-69)`
@code_tooltip_random = `random()`
0(포함)과 1(제외) 사이의 임의의 숫자를 샘플링해요.

임의의 숫자를 반환해요.

실행하는 데 `1` ticks가 걸려요.

예시:
`def random_elem(list):
	index = random() * len(list) // 1
	return list[index]`
@code_tooltip_append = `list.append(element)` 
`list`의 끝에 `element`를 추가해요.

`None`을 반환해요

실행하는 데 `1` ticks가 걸려요.

예시:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)` 
`set`에 `element`를 추가해요.

`None`을 반환해요

실행하는 데 `element size` ticks가 걸려요.

예시:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)` 
`collection`에서 처음 나타나는 `element`를 제거해요.

`None`을 반환해요

세트에서는 `element size` ticks, 리스트에서는 비교 횟수 + 이동 횟수 ticks가 걸려요.

예시:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()` 
리스트의 마지막 요소를 제거하거나 딕셔너리에서 지정된 요소를 제거해요.
`list.pop(i)`는 `list`에서 인덱스 `i`의 요소를 제거해요.

제거된 요소를 반환해요.

딕셔너리에서는 `key size` ticks, 리스트에서는 `len(list) - i + 1` ticks가 걸려요.

예시:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)` 
`list`의 인덱스 `i`에 `element`를 삽입해요.

`None`을 반환해요

`len(list) - i + 1` ticks가 걸려요.

예시:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = 인벤토리에 있을 수 있는 모든 아이템을 포함해요. `for` 루프로 반복할 수 있어요.
@code_tooltip_Entities = 모든 식물 종류를 포함해요. `for` 루프로 반복할 수 있어요.
@code_tooltip_Grounds = 가능한 모든 땅 종류를 포함해요. `for` 루프로 반복할 수 있어요.
@code_tooltip_Unlocks = 연구 메뉴의 모든 해금 요소와 업그레이드를 포함해요. `for` 루프로 반복할 수 있어요.
@code_tooltip_Hats = 모든 모자 종류를 포함해요. `for` 루프로 반복할 수 있어요.
@code_tooltip_Leaderboards = 모든 리더보드 카테고리를 포함해요. `for` 루프로 반복할 수 있어요.
@code_tooltip_for = 시퀀스의 모든 요소를 반복하는 루프예요. 일부 프로그래밍 언어에서는 이것을 "foreach" 루프라고 불러요.
@code_tooltip_while = 조건이 거짓이 될 때까지 반복해요.
@code_tooltip_def = 함수를 정의해요.
@code_tooltip_True = 항상 참인 불리언 값이에요.
@code_tooltip_False = 항상 거짓인 불리언 값이에요.
@code_tooltip_if = 조건이 `True`이면 코드를 실행해요.
@code_tooltip_else = 이전 `if` 조건이 `False`이면 코드를 실행해요.
@code_tooltip_elif = 다음과 같은 일을 해요:
`else:
    if condition:`
@code_tooltip_None = 값이 없음을 나타내는 값이에요.
@code_tooltip_continue = 즉시 다음 루프 반복으로 넘어가요. 중첩된 루프가 있는 경우, 항상 가장 안쪽 루프에 영향을 줘요.
@code_tooltip_break = 루프를 빠져나와 루프 다음의 문장을 계속 실행해요. 중첩된 루프가 있는 경우, 항상 가장 안쪽 루프에 영향을 줘요.
@code_tooltip_North = 화면의 위쪽 방향이에요. 화면을 돌리지 않는 한 말이죠.
@code_tooltip_East = 화면의 오른쪽 방향이에요. 화면을 돌리지 않는 한 말이죠.
@code_tooltip_South = 화면의 아래쪽 방향이에요. 화면을 돌리지 않는 한 말이죠.
@code_tooltip_West = 화면의 왼쪽 방향이에요. 화면을 돌리지 않는 한 말이죠.
@code_tooltip_not = `not True`는 `False`이고 `not False`는 `True`예요.
@code_tooltip_and = 첫 번째 피연산자를 평가해요. 거짓 같은(`False`, `0`, 빈 컬렉션) 값이면 즉시 그 값을 반환해요(평가를 단축). 그렇지 않으면 두 번째 피연산자를 평가하고 반환해요.
@code_tooltip_or = 첫 번째 피연산자를 평가해요. 참 같은(`False`, `0`, 빈 컬렉션이 아닌 모든 값) 값이면 즉시 그 값을 반환해요(평가를 단축). 그렇지 않으면 두 번째 피연산자를 평가하고 반환해요.
@code_tooltip_return = 함수에서 값을 반환할 때 사용해요.
@code_tooltip_pass = 아무것도 하지 않아요. 빈 코드 블록은 허용되지 않으므로 유용할 수 있어요.