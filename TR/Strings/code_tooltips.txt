@code_tooltip_harvest = `harvest()`
Drone'un altındaki varlığı hasat eder. 
Hasat edilemeyen bir varlığı hasat edersen, yok edilir.

bir varlık kaldırıldıysa `True`, aksi takdirde `False` döndürür.

bir varlık kaldırıldıysa `200` tick, aksi takdirde `1` tick sürer.

örnek:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
Bitkilerin tamamen büyüyüp büyümediğini öğrenmek için kullanılır.

drone'un altında hasat edilmeye hazır bir varlık varsa `True`, aksi takdirde `False` döndürür.

çalışması `1` tick sürer.

örnek:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range(start = 0, end, step = 1)`
`start`'ta başlayan, `end`'e gelmeden hemen önce biten (`end` dahil değildir) ve `step` büyüklüğünde adımlar kullanarak bir sayı dizisi oluşturur.

`start`'ın varsayılan olarak `0` olduğunu ve yalnızca bir argüman verilirse bunun `end`'e bağlanacağını unutma. Bu normalde mümkün değildir.
Python'da `range`, bu garip davranışa izin veren bir sınıf yapıcı metodudur.

çalışması `1` tick sürer.

örnek:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)` 
Belirtilen `entity`'nin maliyetini harcar ve onu drone'un altına eker.
Bitkiyi karşılayamazsan, zemin türü yanlışsa veya orada zaten bir bitki varsa başarısız olur.

başarılı olduysa `True`, aksi takdirde `False` döndürür.

başarılı olduysa `200` tick, aksi takdirde `1` tick sürer.

örnek:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
Drone'u belirtilen `direction`'a doğru bir kare hareket ettirir.
Eğer drone çiftliğin kenarından dışarı çıkarsa, çiftliğin diğer tarafından geri döner.

`East `  =  sağ
`West `  =  sol
`North`  =  yukarı
`South`  =  aşağı

drone hareket ettiyse `True`, aksi takdirde `False` döndürür.

drone hareket ettiyse `200` tick, aksi takdirde `1` tick sürer.

örnek:
`move(North)`
@code_tooltip_swap = `swap(direction)`
Drone'un altındaki varlığı, belirtilen `direction`'daki yanındaki varlıkla değiştirir.
Tüm varlıklarda çalışmaz.
Varlıklardan biri (veya her ikisi) `None` ise de çalışır.

başarılı olduysa `True`, aksi takdirde `False` döndürür.

başarılı olduğunda `200` tick, aksi takdirde `1` tick sürer.

örnek:
`swap(North)`
@code_tooltip_till = `till()` 
Drone'un altındaki zemini `Grounds.Soil`'e sürer. Eğer zaten `Soil` ise, zemini tekrar `Grounds.Grassland`'e dönüştürür.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()` 
Drone'un mevcut x pozisyonunu alır.
x pozisyonu batıda `0`'dan başlar ve doğu yönünde artar.

drone'un mevcut x koordinatını temsil eden bir sayı döndürür.

çalışması `1` tick sürer.

örnek:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()` 
Drone'un mevcut y pozisyonunu alır.
y pozisyonu güneyde `0`'dan başlar ve kuzey yönünde artar.

drone'un mevcut y koordinatını temsil eden bir sayı döndürür.

çalışması `1` tick sürer.

örnek:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()` 
Çiftliğin mevcut boyutunu alır.

ızgaranın kuzeyden güneye yönündeki kenar uzunluğunu döndürür.

çalışması `1` tick sürer.

örnek:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()` 
Drone'un altında ne tür bir varlık olduğunu bulur.

kare boşsa `None` döndürür, aksi takdirde drone'un altındaki varlığın türünü döndürür.

çalışması `1` tick sürer.

örnek:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()` 
Drone'un altında ne tür bir zemin olduğunu bulur.

drone'un altındaki zeminin türünü döndürür.

çalışması `1` tick sürer.

örnek:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()` 
Mevcut oyun zamanını alır.

oyunun başlangıcından bu yana geçen süreyi saniye cinsinden döndürür.

çalışması `1` tick sürer.

örnek:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_tick_count = `get_tick_count()`
Gerçekleştirilen tick sayısını ölçmek için kullanılır.

çalışmanın başlangıcından bu yana gerçekleştirilen tick sayısını döndürür.

çalışması `0` tick sürer.

örnek:
`do_something()

print(get_tick_count())`
@code_tooltip_use_item = `use_item(item, n=1)` 
Belirtilen `item`'ı `n` kez kullanmaya çalışır. Yalnızca `Items.Water`, `Items.Fertilizer` gibi bazı eşyalarla kullanılabilir.

bir eşya kullanıldıysa `True`, aksi takdirde `False` döndürür.

başarılı olduysa `200` tick, aksi takdirde `1` tick sürer.

örnek:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()` 
Drone'un altındaki mevcut su seviyesini alır.

drone'un altındaki su seviyesini `0` ile `1` arasında bir sayı olarak döndürür.

çalışması `1` tick sürer.

örnek:
`if get_water() < 0.5:
    use_item(Items.Water)`
@code_tooltip_do_a_flip = `do_a_flip()` 
Drone'un takla atmasını sağlar! Bu eylem hız yükseltmelerinden etkilenmez.

`None` döndürür

çalışması 1s sürer.

örnek:
`while True:
    do_a_flip()`
@code_tooltip_pet_the_piggy = `pet_the_piggy()` 
Domuzcuğu sever! Bu eylem hız yükseltmelerinden etkilenmez.

`None` döndürür

çalışması 1s sürer.

örnek:
`while True:
    pet_the_piggy()`
@code_tooltip_print = `print(*args)` 
Tüm `args`'ları duman kullanarak drone'un üzerindeki havaya yazdırır. Bu eylem hız yükseltmelerinden etkilenmez.
Aynı anda birden fazla değer yazdırılabilir.

`None` döndürür

çalışması 1s sürer.

örnek:
`print("zemin:", get_ground_type())`
@code_tooltip_len = `len(collection)` 
Bir list, set, dict veya tuple'daki eleman sayısını alır.

`collection`'ın uzunluğunu döndürür.

çalışması `1` tick sürer.

örnek:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list(collection = None)`
Yeni bir list oluşturur. 
Eğer `collection` None ise, boş bir list oluşturur.
Eğer `collection` bir koleksiyon ise, ondan bir kopya oluşturur.

bir list döndürür.

çalışması `1 + len(collection)` tick sürer.

örnek:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict(dictionary = None)`
Yeni bir dictionary oluşturur.
Eğer `dictionary` None ise, boş bir dictionary oluşturur.
Eğer `dictionary` bir dictionary ise, onun bir kopyasını oluşturur.

bir dictionary döndürür.

çalışması `1 + len(dictionary)` tick sürer.

örnek:
`new_dict = dict()`
@code_tooltip_set = `set(collection = None)`
Yeni bir set oluşturur.
Eğer `collection` None ise, boş bir set oluşturur.
Eğer `collection` bir değerler koleksiyonu ise, bu değerleri içeren yeni bir set oluşturur.

bir set döndürür.

çalışması `1 + len(collection)` tick sürer.

örnek:
`new_set = set((1,2,3))`
@code_tooltip_str = `str(object)`

`object`'in bir string temsilini döndürür.

çalışması `1` tick sürer.

örnek:
`string = str(1000)`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
Neler olup bittiğini daha iyi görmek için programın yürütülme hızını sınırlar.

`1`'lik bir `speed`, drone'un herhangi bir hız yükseltmesi olmadan sahip olduğu hızdır.
`10`'luk bir `speed` kodun `10` kat daha hızlı çalışmasını sağlar ve `9` hız yükseltmesinden sonraki drone'un hızına karşılık gelir.
`0.5`'lik bir `speed`, kodun hız yükseltmeleri olmadan sahip olduğu hızın yarısında çalışmasını sağlar. Bu, kodun ne yaptığını görmek için faydalı olabilir.

Eğer `speed` mevcut yürütme hızından daha hızlıysa, sadece maksimum hızda çalışır.

Eğer `speed` `0` veya negatif ise, hız tekrar maksimum hıza değiştirilir.
Etki, yürütme durduğunda da sona erer.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`set_execution_speed(1)`
@code_tooltip_set_world_size = `set_world_size(size)`
Neler olup bittiğini daha iyi görmek için çiftliğin boyutunu sınırlar.
Ayrıca çiftliği temizler ve drone pozisyonunu sıfırlar.
Çiftliği `size` x `size` boyutunda bir ızgaraya ayarlar.
Mümkün olan en küçük `size` `3`'tür.
`3`'ten küçük bir `size`, ızgarayı tekrar tam boyutuna döndürür.
Etki, yürütme durduğunda da sona erer.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`set_world_size(5)`
@code_tooltip_num_items = `num_items(item)` 
Şu anda ne kadar `item`'a sahip olduğunu öğrenir.

envanterinde bulunan `item` sayısını döndürür.

çalışması `1` tick sürer.

örnek:
`if num_items(Items.Fertilizer) > 0:
    use_item(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)` 
Bir `şey`in maliyetini alır

Eğer `thing` bir varlıksa, onu ekmenin maliyetini alır.
Eğer `thing` bir kilit açma ise, kilidini açmanın maliyetini alır.

anahtar olarak eşyaları ve değer olarak sayıları içeren bir dictionary döndürür. Her eşya, ne kadar gerektiğine eşlenir.
yükseltilebilir ve zaten son seviyede olan bir kilit açmada kullanıldığında `{}` döndürür.

çalışması `1` tick sürer.

örnek:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("havuçların kilidini açmak için yeterli eşya yok")`
@code_tooltip_clear = `clear()` 
Çiftlikteki her şeyi kaldırır, drone'u `(0,0)` pozisyonuna geri taşır ve şapkayı tekrar hasır şapkaya değiştirir.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`clear()`
@code_tooltip_get_companion = `get_companion()` 
Drone'un altındaki bitkinin tercih ettiği yoldaşı alır.

`(yoldaş_türü, (yoldaş_x_pozisyonu, yoldaş_y_pozisyonu))` şeklinde bir tuple döndürür

çalışması `1` tick sürer.

örnek:
`companion = get_companion()
if companion != None:
	print(companion)`
@code_tooltip_unlock = `unlock(unlock)` 
Araştırma ağacında `unlock`'a karşılık gelen düğmeye tıklamakla tam olarak aynı etkiye sahiptir.

kilit açma başarılıysa `True`, aksi takdirde `False` döndürür.

başarılı olduysa `200` tick, aksi takdirde `1` tick sürer.

örnek:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
Bir kilit açma, varlık, zemin veya eşyanın kilidinin zaten açık olup olmadığını kontrol etmek için kullanılır.

`thing` yükseltilebilirse, `1` artı `thing`'in kaç kez yükseltildiği sayısını döndürür. Aksi takdirde `thing`'in kilidi açıksa `1`, değilse `0` döndürür.

çalışması `1` tick sürer.

örnek:
`plant(Entities.Bush)
n_substance = get_world_size() * num_unlocked(Unlocks.Mazes)
use_item(Items.Weird_Substance, n_substance)`
@code_tooltip_reset = `reset()` 
Çiftliği 1x1'lik bir kareye geri sıfırlar, tüm kaynakları kaldırır ve çoğu kilit açmayı kilitler.
Kodlarından hiçbirini kaldırmaz.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`reset()`
@code_tooltip_measure = `measure(direction = None)` 
Bazı varlıklar üzerinde bazı değerleri ölçebilir. Bunun etkisi varlığa bağlıdır.

Eğer `direction` `None` değilse, verilen yöndeki komşu varlığı ölçer.

bir ayçiçeğinin yaprak sayısını döndürür.
bir hazine veya elma için sonraki pozisyonu döndürür.
bir kaktüsün boyutunu döndürür.
bir balkabağı için gizemli bir sayı döndürür.
diğer tüm varlıklar için `None` döndürür.

çalışması `1` tick sürer.

örnek:
`num_petals = measure()`
@code_tooltip_leaderboard_run = `leaderboard_run(leaderboard, file_name, speedup)`
Belirtilen `file_name`'i başlangıç noktası olarak kullanarak `leaderboard` için zamanlı bir simülasyon başlatır.
`speedup`, başlangıç hızlandırmasını ayarlar.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`leaderboard_run(Leaderboards.Fastest_Reset, "full_run", 256)`
@code_tooltip_simulate = `simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
Belirtilen `filename`'i başlangıç noktası olarak kullanarak leaderboard için bir simülasyon başlatır.

`sim_unlocks`: Başlangıç kilit açmalarını içeren bir dizi.
`sim_items`: Eşyaları miktarlarla eşleyen bir dict. Simülasyon bu eşyalarla başlar.
`sim_globals`: Değişken adlarını değerlerle eşleyen bir dict. Simülasyon bu değişkenlerle global scope'ta başlar.
`seed`: Simülasyonun rastgele seed'i. Pozitif bir tamsayı olmalıdır.
`speedup`: Başlangıç hızlandırması.

simülasyonu çalıştırmanın ne kadar sürdüğünü döndürür.

çalışması `200` tick sürer.

örnek:
`filename = "f1"
sim_unlocks = Unlocks
sim_items = {Items.Carrot : 10000, Items.Hay : 50}
sim_globals = {"a" : 13}
seed = 0
speedup = 64

run_time = simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
@code_tooltip_spawn_drone = `spawn_drone(filename)`
`spawn_drone("filename")` komutunu çalıştıran drone ile aynı pozisyonda yeni bir drone oluşturur. Yeni drone, `filename` adlı dosyadaki programı yürütmeye başlayacaktır.

yeni drone'un drone ID'sini döndürür.

çalışması `200` tick sürer.

örnek:
`farming routine` adlı bir dosyada:
`if get_drone_id() == 0:
    # Bunu sadece ilk drone çalıştıracak
    while num_drones() < max_drones():
        spawn_drone("farming routine")
        move(East)`

while True:
    if can_harvest():
        harvest()
    move(North)`
@code_tooltip_send = `send(value, receiver_id)`

Drone ID'si `receiver_id`'ye eşit olan drone'a herhangi bir türde `value` gönderir.

`None` döndürür

çalışması gönderilen `value`'nun boyutuna eşit tick sürer.

örnek:
`words_to_print = ["Bunlar", "bazı", "kelimeler."]

if get_drone_id() == 0:
    for word in words_to_print[:-1]:
        receiver_id = spawn_drone("example")
        send(word, receiver_id)
        for _ in range(4):
            move(East)

    print(words_to_print[-1])
else:
	while True:
		word = receive(0)
		if word != None:
			break
	    
print(word)`
@code_tooltip_receive = `receive(sender_id = -1)`

`sender_id`'li drone tarafından bu drone'a gönderilen ilk alınmamış mesajı alır.
Eğer `sender_id` `-1` ise, herhangi bir drone tarafından bu drone'a gönderilen ilk alınmamış mesajı alır.

gönderilen veriyi döndürür

çalışması `1` tick sürer.

örnek:
`words_to_print = ["Bunlar", "bazı", "kelimeler."]

if get_drone_id() == 0:
    for word in words_to_print[:-1]:
        receiver_id = spawn_drone("example")
        send(word, receiver_id)
        for _ in range(4):
            move(East)

    print(words_to_print[-1])
else:
	while True:
		word = receive(0)
		if word != None:
			break
	    
print(word)`
@code_tooltip_get_drone_id = `get_drone_id()`

kodu çalıştıran drone'un ID'sini döndürür.

çalışması `1` tick sürer.

örnek:
`farming routine` adlı bir dosyada:
`if get_drone_id() == 0:
    # Bunu sadece ilk drone çalıştıracak
    while num_drones() < max_drones():
        spawn_drone("farming routine")
        move(East)

while True:
    if can_harvest():
        harvest()
    move(North)`
@code_tooltip_max_drones = `max_drones()`

çiftlikte sahip olabileceğin maksimum drone sayısını döndürür.

çalışması `1` tick sürer.

örnek:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`
@code_tooltip_num_drones = `num_drones()`

şu anda çiftlikte bulunan drone sayısını döndürür.

çalışması `1` tick sürer.

örnek:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`
@code_tooltip_quick_print = `quick_print(*args)`
Bir değeri `print(*args)` gibi yazdırır ancak havaya yazmak için durmaz, bu yüzden sadece çıktı sayfasında bulunabilir.

`None` döndürür

çalışması `0` tick sürer.

örnek:
`quick_print("selam anne")`
@code_tooltip_change_hat = `change_hat(hat)`
Drone'un şapkasını `hat` olarak değiştirir.

`None` döndürür

çalışması `200` tick sürer.

örnek:
`change_hat(Hats.Dinosaur_Hat)`
@code_tooltip_max = `max(*args)`
Bir eleman dizisinin veya geçilen birkaç argümanın maksimumunu alır.
Sayılar ve stringler üzerinde kullanılabilir.

`max(a,b,c)`: `a`, `b` ve `c`'nin maksimumunu döndürür.
`max(sequence)`: Bir dizideki tüm değerlerin maksimumunu döndürür.

çalışması #karşılaştırma sayısı kadar tick sürer.

örnek:
`max([3,6,34,16])`
@code_tooltip_min = `min(*args)`
Bir eleman dizisinin veya geçilen birkaç argümanın minimumunu alır.
Sayılar ve stringler üzerinde kullanılabilir.

`min(a,b,c)`: `a`, `b` ve `c`'nin minimumunu döndürür.
`min(sequence)`: Bir dizideki tüm değerlerin minimumunu döndürür.

çalışması #karşılaştırma sayısı kadar tick sürer.

örnek:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
Bir sayının mutlak değerini hesaplar.

`number` pozitifse `number`, aksi takdirde `-number` döndürür.

çalışması #karşılaştırma sayısı kadar tick sürer.

örnek:
`abs(-69)`
@code_tooltip_random = `random()`
0 (dahil) ile 1 (hariç) arasında rastgele bir sayı seçer.

rastgele sayıyı döndürür.

çalışması `1` tick sürer.

örnek:
`def random_elem(list):
	index = random() * len(list) // 1
	return list[index]`
@code_tooltip_append = `list.append(element)` 
`element`'i `list`'in sonuna ekler.

`None` döndürür

çalışması `1` tick sürer.

örnek:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)` 
`element`'i `set`'e ekler.

`None` döndürür

çalışması `eleman boyutu` kadar tick sürer.

örnek:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)` 
`collection`'dan `element`'in ilk örneğini kaldırır.

`None` döndürür

bir set üzerinde çalışması `eleman boyutu` tick, bir list üzerinde #karşılaştırma sayısı + #kaydırılan eleman sayısı tick sürer.

örnek:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()` 
Bir list'ten son elemanı veya bir dictionary'den belirtilen elemanı kaldırır.
`list.pop(i)`, `list`'ten `i` indeksindeki elemanı kaldırır.

kaldırılan elemanı döndürür

bir dictionary üzerinde çalışması `anahtar boyutu` tick, bir list üzerinde `len(list) - i + 1` tick sürer.

örnek:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)` 
`element`'i `list`'e `i` indeksine ekler.

`None` döndürür

`len(list) - i + 1` tick sürer.

örnek:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = Envanterde olabilecek tüm eşyaları içerir. `for` döngüsü ile yinelenebilir.
@code_tooltip_Entities = Tüm bitki türlerini içerir. `for` döngüsü ile yinelenebilir.
@code_tooltip_Grounds = Mümkün olan tüm zemin türlerini içerir. `for` döngüsü ile yinelenebilir.
@code_tooltip_Unlocks = Araştırma menüsündeki tüm kilit açmaları ve yükseltmeleri içerir. `for` döngüsü ile yinelenebilir.
@code_tooltip_Hats = Tüm şapka türlerini içerir. `for` döngüsü ile yinelenebilir.
@code_tooltip_Leaderboards = Tüm leaderboard kategorilerini içerir. `for` döngüsü ile yinelenebilir.
@code_tooltip_for = Bir dizinin tüm elemanları üzerinde yineleme yapan bir döngü. Bazı programlama dilleri buna "foreach" döngüsü der.
@code_tooltip_while = Koşul yanlış olana kadar döngüye devam eder.
@code_tooltip_def = Bir fonksiyon tanımlar.
@code_tooltip_True = Her zaman doğru olan bir boolean değer.
@code_tooltip_False = Her zaman yanlış olan bir boolean değer.
@code_tooltip_if = Koşul `True` ise kodu çalıştırır.
@code_tooltip_else = Önceki `if` koşulu `False` ise kodu çalıştırır.
@code_tooltip_elif = Aynı şeyi yapar:
`else:
    if condition:`
@code_tooltip_None = Değer olmadığını temsil eden bir değer.
@code_tooltip_continue = Hemen bir sonraki döngü yinelemesine devam et. İç içe döngüler varsa, bu her zaman en içteki döngüyü etkiler.
@code_tooltip_break = Bir döngüden çık ve döngüden sonraki ifadeleri yürütmeye devam et. İç içe döngüler varsa, bu her zaman en içteki döngüyü etkiler.
@code_tooltip_North = Ekranın yukarı yönü. Ekranını döndürmediğin sürece.
@code_tooltip_East = Ekranın sağ yönü. Ekranını döndürmediğin sürece.
@code_tooltip_South = Ekranın aşağı yönü. Ekranını döndürmediğin sürece.
@code_tooltip_West = Ekranın sol yönü. Ekranını döndürmediğin sürece.
@code_tooltip_not = `not True`, `False`'tur ve `not False`, `True`'dur.
@code_tooltip_and = İlk işleneni değerlendirir. Eğer yanlışsa (`False`, `0` ve boş koleksiyonlar), hemen o değeri döndürür (değerlendirmeyi kısa devre yapar), aksi takdirde ikinci işleneni değerlendirir ve döndürür.
@code_tooltip_or = İlk işleneni değerlendirir. Eğer doğruysa ( `False`, `0` ve boş koleksiyonlar dışındaki her şey), hemen o değeri döndürür (değerlendirmeyi kısa devre yapar), aksi takdirde ikinci işleneni değerlendirir ve döndürür.
@code_tooltip_return = Bir fonksiyondan bir değer döndürmek için kullanılır.
@code_tooltip_pass = Hiçbir şey yapmaz. Boş kod bloklarına izin verilmediği için yararlı olabilir.