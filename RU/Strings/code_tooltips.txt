@code_tooltip_harvest = `harvest()`
Собирает урожай с сущности под дроном.
Если вы собираете сущность, которую нельзя собрать, она будет уничтожена.

возвращает `True`, если сущность была удалена, `False` в противном случае.

требует `200` тиков для выполнения, если сущность была удалена, `1` тик в противном случае.

пример:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
Используется, чтобы узнать, полностью ли выросли растения.

Возвращает `True`, если под дроном находится entity, готовая к сбору урожая, иначе `False`.

Выполняется за `1` tick.

пример:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range(start = 0, end, step = 1)`
Генерирует последовательность чисел, начиная с `start`, заканчивая непосредственно перед `end` (то есть `end` исключен) с шагом размера `step`.

Обратите внимание, что по умолчанию start установлен на `0`, и если задан только один аргумент, он будет привязан к `end`. Обычно это невозможно.
В Python `range` — это класс-конструктор, который позволяет это странное поведение.

выполняется за `1` тик.

пример:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)` 
Тратит стоимость указанного `entity` и сажает его под дроном.
Не удается, если вы не можете себе это позволить, тип земли неправильный или там уже есть растение.

возвращает `True`, если удалось, `False` в противном случае.

занимает `200` тиков на выполнение, если удалось, `1` тик в противном случае.

пример:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
Перемещает дрон в указанном `direction` на одну клетку.
Если дрон перемещается за край фермы, он появляется с другой стороны фермы.

`East `  =  направо
`West `  =  налево
`North`  =  вверх
`South`  =  вниз

возвращает `True`, если дрон переместился, `False` в противном случае.

занимает `200` тиков для выполнения, если дрон переместился, `1` тик в противном случае.

пример:
`move(North)`
@code_tooltip_swap = `swap(direction)` Меняет сущность под дроном с сущностью рядом с дроном в указанном `direction`. Не работает на всех сущностях. Также работает, если хотя бы одна из сущностей — `None`. возвращает `True`, если выполнено успешно, иначе `False`. выполнение занимает `200` тиков при успехе, `1` тик в противном случае. пример: `swap(North)`
@code_tooltip_till = `till()` 
Вспахивает землю под дроном, превращая её в `Grounds.Soil`. Если уже почва, изменяет землю обратно в `Grounds.Grassland`.

возвращает `None`

занимает `200` тиков для выполнения.

пример:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()` 
Возвращает текущую позицию x дрона.
Позиция x начинается с `0` на западе и увеличивается в восточном направлении.

возвращает число, представляющее текущую координату x дрона.

требует `1` тик для выполнения.

пример:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()` 
Возвращает текущую y позицию дрона.
Y позиция начинается с `0` на юге и увеличивается в направлении к северу.

Возвращает число, представляющее текущую y координату дрона.

Требуется `1` тик для выполнения.

Пример:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()` 
Получает текущий размер фермы.

Возвращает длину стороны сетки в направлении с севера на юг.

Выполнение занимает `1` тик.

Пример:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()` 
Узнайте, какой тип entity находится под дроном.

возвращает `None`, если плитка пустая, иначе возвращает тип entity под дроном.

выполнение занимает `1` тик.

пример:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()` 
Узнай, какая земля находится под дроном.

возвращает тип земли под дроном.

занимает `1` тик для выполнения.

пример:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()` 
Получает текущее игровое время.

возвращает время в секундах с начала игры.

требует `1` тик на выполнение.

пример:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_tick_count = `get_tick_count()`
Используется для измерения количества выполненных тик.

возвращает количество тик, выполненных с начала выполнения.

занимает `0` тик для выполнения.

пример:
`do_something()

print(get_tick_count())`
@code_tooltip_use_item = `use_item(item, n=1)` 
Позволяет использовать указанный `item` `n` раз. Можно использовать только с некоторыми предметами, включая `Items.Water`, `Items.Fertilizer`.

возвращает `True`, если предмет был использован, `False` в противном случае.

требует `200` тиков для выполнения при успехе, `1` тик в противном случае.

пример:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()` 
Получить текущий уровень воды под дроном.

возвращает уровень воды под дроном в виде числа между `0` и `1`.

требует `1` тик для выполнения.

пример:
`if get_water() < 0.5:
    use_item(Items.Water)`
@code_tooltip_do_a_flip = `do_a_flip()`  
Заставляет дрон делать сальто! На это действие не влияют улучшения скорости.

возвращает `None`

требуется 1s для выполнения.

пример:
`while True:
    do_a_flip()`
@code_tooltip_print = `print(*args)` 
Печатает все `args` в воздух над дроном с помощью дыма. На это действие не влияют улучшения скорости.
Можно напечатать несколько значений сразу.

возвращает `None`

требуется 1s для выполнения.

пример:
`print("ground:", get_ground_type())`
@code_tooltip_len = `len(collection)` 
Получает количество элементов в списке, set, dict или кортежe.

возвращает длину `collection`.

требуется `1` tick для выполнения.

пример:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list(collection = None)`
Создает новый список.
Если `dictionary` равен None, создается пустой словарь.
Если `dictionary` является словарем, создается его копия.

возвращает список.

выполняется за `1 + len(collection)` тик.

пример:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict(dictionary = None)`
Создает новый dictionary.
Если `dictionary` равно None, создается пустой dictionary.
Если `dictionary` является dictionary, создается его копия.

Возвращает dictionary.

Выполняется за `1 + len(dictionary)` тик.

Пример:
`new_dict = dict()`
@code_tooltip_set = `set(collection = None)`  
Создает новый set.  
Если `collection` равно None, создается пустой set.  
Если `collection` является набором значений, создается новый set с этими значениями.  

Возвращает set.  

Выполнение занимает `1 + len(collection)` тик.  

пример:  
`new_set = set((1,2,3))`
@code_tooltip_str = `str(object)`

возвращает строковое представление `object`.

выполняется за `1` тик.

пример:
`string = str(1000)`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
Ограничивает скорость выполнения программы, чтобы лучше видеть, что происходит.

`speed` равная `1` — это скорость дрона без каких-либо улучшений. `speed` равная `10` заставляет код выполняться в `10` раз быстрее и соответствует скорости дрона после `9` улучшений скорости. `speed` равная `0.5` заставляет код выполняться в два раза медленнее без улучшений скорости. Это может быть полезно, чтобы увидеть, что делает код.

Если `speed` больше, чем текущая максимальная скорость выполнения, код будет выполняться с максимальной скоростью.

Если `speed` равна `0` или отрицательна, скорость изменится на максимальную. Эффект также прекращается, когда выполнение останавливается.

возвращает `None`

требует `200` тиков для выполнения.

пример:
`set_execution_speed(1)`
@code_tooltip_set_world_size = `set_world_size(size)`
Ограничивает размер фермы, чтобы лучше видеть, что происходит.
Также очищает ферму и сбрасывает позицию дрона.
Устанавливает ферму в сетку `size` на `size`.
Самый маленький возможный `size` — это `3`.
Если `size` меньше `3`, сетка вернется к своему полному размеру.
Эффект также прекратится, когда выполнение остановится.

возвращает `None`

занимает `200` тиков для выполнения.

пример:
`set_world_size(5)`
@code_tooltip_num_items = `num_items(item)` 
Узнайте, сколько у вас сейчас `item`.

возвращает количество `item` в вашем инвентаре.

выполняется за `1` тик.

пример:
`if num_items(Items.Fertilizer) > 0:
    use_item(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)` 
Получает стоимость `thing`

Если `thing` является entity, получает стоимость посадки.
Если `thing` является unlock, получает стоимость разблокировки.

Возвращает dictionary с элементами в качестве ключей и числами в качестве значений. Каждый элемент сопоставлен с количеством, необходимым для него.
Возвращает `{}` при использовании на апгрейде, который уже на максимальном уровне.

Требует `1` tick для выполнения.

пример:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("not enough items to unlock carrots")`
@code_tooltip_clear = `clear()`  
Убирает всё с фермы, перемещает дрон обратно в позицию `(0,0)` и меняет обратно шляпу на соломенную.

возвращает `None`

требует `200` тиков для выполнения.

пример:  
`clear()`
@code_tooltip_get_companion = `get_companion()` 
Получить предпочтительного соседа растения под дроном.

Возвращает кортеж в формате `(companion_type, (companion_x_position, companion_y_position))`

занимает `1` тик на выполнение.

пример:
`companion = get_companion()
if companion != None:
	print(companion)`
@code_tooltip_unlock = `unlock(unlock)` 
Имеет точно такой же эффект, как нажатие кнопки, соответствующей `unlock` в дереве исследований.

возвращает `True`, если действие прошло успешно, и `False` в противном случае.

занимает `200` тик для выполнения, если успешно, и `1` тик в противном случае.

пример:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
Используется для проверки, разблокирован ли уже объект, сущность, земля или предмет.

Возвращает `1` плюс количество обновлений `thing`, если `thing` может быть обновлен. В противном случае возвращает `1`, если `thing` разблокирован, или `0`, если нет.

Требует `1` тик для выполнения.

пример:
`plant(Entities.Bush)
n_substance = get_world_size() * num_unlocked(Unlocks.Mazes)
use_item(Items.Weird_Substance, n_substance)`
@code_tooltip_reset = `reset()` 
Сбрасывает ферму обратно до квадрата 1x1, удаляет все ресурсы и блокирует большинство разблокировок. 
Ваш код при этом не удаляется.

возвращает `None`

выполнение занимает `200` тиков.

пример:
`reset()`
@code_tooltip_measure = `measure(direction = None)` 
Может измерить некоторые значения на некоторых объектах. Эффект зависит от объекта.

Если `direction` не `None`, измеряет соседний объект в указанном направлении.

возвращает количество лепестков у подсолнуха.
возвращает следующую позицию для сокровища или яблока.
возвращает размер кактуса.
возвращает таинственное число для тыквы.
возвращает `None` для всех остальных объектов.

требуется `1` tick для выполнения.

пример:
`num_petals = measure()`
@code_tooltip_leaderboard_run = `leaderboard_run(leaderboard, file_name, speedup)`  
Запускает симуляцию с отсчётом времени для `leaderboard` с использованием указанного `file_name` в качестве начальной точки.  
`speedup` устанавливает начальное ускорение.

возвращает `None`

выполняется за `200` тиков.

пример:  
`leaderboard_run(Leaderboards.Fastest_Reset, "full_run", 256)`
@code_tooltip_simulate = `simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
Запускает симуляцию для leaderboard, используя указанный `file_name` как начальную точку.

`sim_unlocks`: Последовательность, содержащая начальные разблокировки.
`sim_items`: Словарь, отображающий предметы и их количество. Симуляция начинается с этих предметов.
`sim_globals`: Словарь, отображающий имена переменных и их значения. Симуляция начинается с этих переменных в глобальной области.
`seed`: Случайное число симуляции. Должно быть положительным целым числом.
`speedup`: Начальное ускорение.

возвращает время, затраченное на выполнение симуляции.

выполняется за `200` ticks.

пример:
`filename = "f1"
sim_unlocks = Unlocks
sim_items = {Items.Carrot : 10000, Items.Hay : 50}
sim_globals = {"a" : 13}
seed = 0
speedup = 64

run_time = simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
@code_tooltip_quick_print = `quick_print(*args)`
Печатает значение так же, как `print(*args)`, но не останавливается, чтобы записать это в воздух, поэтому оно может быть найдено только на странице вывода.

возвращает `None`

выполняется за `0` тик.

пример:
`quick_print("hi mom")`
@code_tooltip_change_hat = `change_hat(hat)`  
Меняет шляпу дрона на `hat`.

возвращает `None`

требуется `200` тиков для выполнения.

пример:  
`change_hat(Hats.Dinosaur_Hat)`
@code_tooltip_max = `max(*args)`  
Возвращает максимальный элемент из последовательности или нескольких переданных аргументов.  
Может использоваться для чисел и строк.

`max(a,b,c)`: Возвращает максимальное значение из `a`, `b` и `c`.  
`max(sequence)`: Возвращает максимальное значение среди всех значений в последовательности.

Выполнение занимает #comparisons тактов.

пример:  
`max([3,6,34,16])`
@code_tooltip_min = `min(*args)`
Позволяет найти минимальное значение в последовательности элементов или среди нескольких переданных аргументов.
Можно использовать для чисел и строк.

`min(a,b,c)`: Возвращает минимальное из `a`, `b` и `c`.
`min(sequence)`: Возвращает минимальное значение из всех в последовательности.

выполнение занимает #сравнений тиков.

пример:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
Вычисляет абсолютное значение числа.

возвращает `number`, если `number` положительное, иначе `-number`.

выполняется за #сравнений тик.

пример:
`abs(-69)`
@code_tooltip_random = `random()`
Выбирает случайное число между 0 (включительно) и 1 (не включая).

возвращает случайное число.

работает за `1` тик.

пример:
`def random_elem(list):
	index = random() * len(list) // 1
	return list[index]`
@code_tooltip_append = `list.append(element)` 
Добавляет `element` в конец `list`.

возвращает `None`

выполняется за `1` tick.

пример:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)` 
Добавляет `element` в `set`.

возвращает `None`

занимает выполнение `element size` tиков.

пример:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)` 
Удаляет первое вхождение `element` из `collection`.

возвращает `None`

требует `element size` тиков для выполнения на set, #сравнений + #сдвигов тиков на list.

пример:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()` 
Удаляет последний элемент из списка или указанный элемент из dictionary.
`list.pop(i)` удаляет элемент по индексу `i` из `list`.

возвращает удаленный элемент

требует `key size` ticks для выполнения на dictionary, `len(list) - i + 1` ticks на списке.

пример:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)` 
Вставляет `element` в `list` по индексу `i`.

Возвращает `None`

Занимает `len(list) - i + 1` тиков.

пример:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = Содержит все предметы, которые могут находиться в инвентаре. Можно перебирать с помощью цикла `for`.
@code_tooltip_Entities = Содержит все типы растений. Можно перебирать с помощью цикла `for`.
@code_tooltip_Grounds = Содержит все возможные типы земли. Можно перебирать с помощью цикла `for`.
@code_tooltip_Unlocks = Содержит все разблокировки и улучшения в меню исследований. Можно перебирать с помощью `for` цикла.
@code_tooltip_Hats = Содержит все типы шляп. Можно перебирать с помощью `for` цикла.
@code_tooltip_Leaderboards = Содержит все категории leaderboard. Можно перебирать с помощью цикла `for`.
@code_tooltip_for = Цикл, который перебирает все элементы последовательности. В некоторых языках программирования это называется циклом "foreach".
@code_tooltip_while = Цикл выполняется, пока условие истинно.
@code_tooltip_def = Определяет функцию.
@code_tooltip_True = Значение boolean, которое всегда true.
@code_tooltip_False = Значение boolean, которое всегда false.
@code_tooltip_if = Выполняет код, если условие `True`.
@code_tooltip_else = Выполняет код, если предыдущее условие `if` было `False`.
@code_tooltip_elif = Делает то же самое, что и:
`else:
    if condition:`
@code_tooltip_None = Значение, представляющее отсутствие значения.
@code_tooltip_continue = Сразу переходите к следующей итерации цикла. Если есть вложенные циклы, это всегда будет касаться самого внутреннего цикла.
@code_tooltip_break = Выйдите из цикла и продолжите выполнение операторов после цикла. Если есть вложенные циклы, это всегда будет влиять на самый внутренний цикл.
@code_tooltip_North = Направление вверх на экране. Если только вы не повернёте экран.
@code_tooltip_East = Правая сторона на экране. Пока ты не перевернешь экран.
@code_tooltip_South = Направление вниз на экране. Если только ты не повернёшь экран.
@code_tooltip_West = Левое направление на экране. Если только вы не повернёте экран.
@code_tooltip_not = `not True` это `False`, а `not False` это `True`.
@code_tooltip_and = Оценивает первый операнд. Если он ложно (`False`, `0` и пустые коллекции), то сразу возвращает это значение (короткое замыкание), иначе оценивает и возвращает второй операнд.
@code_tooltip_or = Оценивает первый операнд. Если он истинный (все, что не является `False`, `0` и пустыми коллекциями), то возвращает это значение сразу (короткое замыкание вычисления), иначе оценивает и возвращает второй операнд.
@code_tooltip_return = Используется для возврата значения из функции.
@code_tooltip_pass = Ничего не делает. Может быть полезно, так как пустые блоки кода не разрешены.