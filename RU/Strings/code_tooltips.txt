@code_tooltip_harvest = `harvest()`
Собирает урожай с entity под дроном.
Если вы соберёте урожай с entity, с которого нельзя собрать урожай, оно будет уничтожено.

возвращает `True`, если entity было удалено, иначе `False`.

занимает `200` ticks, если entity было удалено, иначе `1` tick.

пример:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
Используется, чтобы узнать, полностью ли выросли растения.

возвращает `True`, если под дроном есть entity, готовое к сбору, иначе `False`.

занимает `1` tick.

пример:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range(start = 0, end, step = 1)`
Генерирует последовательность чисел, начиная со `start`, заканчивая прямо перед `end` (то есть `end` не включается) с шагом `step`.

Обратите внимание, что `start` по умолчанию равен `0`, и если задан только один аргумент, он будет присвоен `end`. Обычно это невозможно.
В Python `range` — это конструктор класса, который допускает такое странное поведение.

занимает `1` tick.

пример:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)` 
Тратит ресурсы на указанный `entity` и сажает его под дроном.
Не сработает, если вы не можете позволить себе растение, тип почвы неправильный или там уже что-то растёт.

возвращает `True` в случае успеха, иначе `False`.

занимает `200` ticks в случае успеха, иначе `1` tick.

пример:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
Перемещает дрон в указанном `direction` на одну клетку.
Если дрон выходит за край фермы, он появляется с другой стороны.

`East `  =  вправо
`West `  =  влево
`North`  =  вверх
`South`  =  вниз

возвращает `True`, если дрон переместился, иначе `False`.

занимает `200` ticks, если дрон переместился, иначе `1` tick.

пример:
`move(North)`
@code_tooltip_can_move() = `can_move(direction)`
Проверяет, может ли дрон двигаться в указанном `direction`.

возвращает `True`, если дрон может двигаться, иначе `False`.

занимает `1` tick.

пример:
`if can_move(North):
    move(North)`
@code_tooltip_swap = `swap(direction)`
Меняет местами entity под дроном с entity рядом с дроном в указанном `direction`.
Работает не со всеми entity.
Также работает, если одно (или оба) из entity — `None`.

возвращает `True` в случае успеха, иначе `False`.

занимает `200` ticks в случае успеха, иначе `1` tick.

пример:
`swap(North)`
@code_tooltip_till = `till()` 
Вспахивает землю под дроном до состояния `Grounds.Soil`. Если это уже почва, то земля вернётся в состояние `Grounds.Grassland`.

возвращает `None`

занимает `200` ticks.

пример:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()` 
Получает текущую x-координату дрона.
x-координата начинается с `0` на западе и увеличивается в восточном направлении.

возвращает число, представляющее текущую x-координату дрона.

занимает `1` tick.

пример:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()` 
Получает текущую y-координату дрона.
y-координата начинается с `0` на юге и увеличивается в северном направлении.

возвращает число, представляющее текущую y-координату дрона.

занимает `1` tick.

пример:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()` 
Получает текущий размер фермы.

возвращает длину стороны сетки в направлении с севера на юг.

занимает `1` tick.

пример:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()` 
Выясняет, какой тип entity находится под дроном.

возвращает `None`, если клетка пуста, иначе возвращает тип entity под дроном.

занимает `1` tick.

пример:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()` 
Выясняет, какой тип почвы находится под дроном.

возвращает тип почвы под дроном.

занимает `1` tick.

пример:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()` 
Получает текущее игровое время.

возвращает время в секундах с начала игры.

занимает `1` tick.

пример:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_tick_count = `get_tick_count()`
Используется для измерения количества выполненных ticks.

возвращает количество ticks, выполненных с начала запуска.

занимает `0` ticks.

пример:
`do_something()

print(get_tick_count())`
@code_tooltip_use_item = `use_item(item, n=1)` 
Пытается использовать указанный `item` `n` раз. Может использоваться только с некоторыми предметами, включая `Items.Water`, `Items.Fertilizer`.

возвращает `True`, если предмет был использован, иначе `False`.

занимает `200` ticks в случае успеха, иначе `1` tick.

пример:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()` 
Получает текущий уровень воды под дроном.

возвращает уровень воды под дроном в виде числа от `0` до `1`.

занимает `1` tick.

пример:
`if get_water() < 0.5:
    use_item(Items.Water)`
@code_tooltip_do_a_flip = `do_a_flip()` 
Заставляет дрон сделать сальто! На это действие не влияют улучшения скорости.

возвращает `None`

выполняется 1с.

пример:
`while True:
    do_a_flip()`
@code_tooltip_pet_the_piggy = `pet_the_piggy()` 
Гладит поросёнка! На это действие не влияют улучшения скорости.

возвращает `None`

выполняется 1с.

пример:
`while True:
    pet_the_piggy()`
@code_tooltip_print = `print(*args)` 
Выводит все `args` в воздух над дроном с помощью дыма. На это действие не влияют улучшения скорости.
Можно выводить несколько значений одновременно.

возвращает `None`

выполняется 1с.

пример:
`print("ground:", get_ground_type())`
@code_tooltip_len = `len(collection)` 
Получает количество элементов в списке (list), множестве (set), словаре (dict) или кортеже (tuple).

возвращает длину `collection`.

занимает `1` tick.

пример:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list(collection = None)`
Создаёт новый list. 
Если `collection` равен None, создаётся пустой list.
Если `collection` это коллекция, создаётся её копия.

возвращает list.

занимает `1 + len(collection)` ticks.

пример:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict(dictionary = None)`
Создаёт новый dict.
Если `dictionary` равен None, создаётся пустой dict.
Если `dictionary` это dict, создаётся его копия.

возвращает dict.

занимает `1 + len(dictionary)` ticks.

пример:
`new_dict = dict()`
@code_tooltip_set = `set(collection = None)`
Создаёт новый set.
Если `collection` равен None, создаётся пустой set.
Если `collection` это коллекция значений, создаётся новый set с этими значениями.

возвращает set.

занимает `1 + len(collection)` ticks.

пример:
`new_set = set((1,2,3))`
@code_tooltip_str = `str(object)`

возвращает строковое представление `object`.

занимает `1` tick.

пример:
`string = str(1000)`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
Ограничивает скорость выполнения программы, чтобы лучше видеть, что происходит.

`speed` равная `1` — это скорость дрона без улучшений скорости.
`speed` равная `10` заставляет код выполняться в `10` раз быстрее и соответствует скорости дрона после `9` улучшений скорости.
`speed` равная `0.5` заставляет код выполняться в два раза медленнее, чем без улучшений скорости. Это может быть полезно, чтобы увидеть, что делает код.

Если `speed` выше, чем текущая возможная скорость выполнения, код будет выполняться на максимальной скорости.

Если `speed` равен `0` или отрицательный, скорость вернётся к максимальной.
Эффект также прекратится, когда остановится выполнение.

возвращает `None`

занимает `200` ticks.

пример:
`set_execution_speed(1)`
@code_tooltip_set_world_size = `set_world_size(size)`
Ограничивает размер фермы, чтобы лучше видеть, что происходит.
Также очищает ферму и сбрасывает позицию дрона.
Устанавливает ферму в сетку `size` x `size`.
Наименьший возможный `size` — `3`.
`size` меньше `3` вернёт сетку к полному размеру.
Эффект также прекратится, когда остановится выполнение.

возвращает `None`

занимает `200` ticks.

пример:
`set_world_size(5)`
@code_tooltip_num_items = `num_items(item)` 
Узнаёт, сколько у вас есть `item`.

возвращает количество `item` в вашем инвентаре.

занимает `1` tick.

пример:
`if num_items(Items.Fertilizer) > 0:
    use_item(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)` 
Получает стоимость `thing`.

Если `thing` это entity, получает стоимость его посадки.
Если `thing` это улучшение, получает стоимость его открытия.

возвращает dict с предметами в качестве ключей и числами в качестве значений. Каждый предмет сопоставлен с необходимым количеством.
возвращает `{}`, если используется на улучшаемом улучшении, которое уже достигло максимального уровня.

занимает `1` tick.

пример:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("not enough items to unlock carrots")`
@code_tooltip_clear = `clear()` 
Удаляет всё с фермы, возвращает дрон на позицию `(0,0)` и меняет шляпу обратно на соломенную.

возвращает `None`

занимает `200` ticks.

пример:
`clear()`
@code_tooltip_get_companion = `get_companion()` 
Получает предпочтительное растение-компаньон для растения под дроном.

возвращает кортеж (tuple) вида `(companion_type, (companion_x_position, companion_y_position))`

занимает `1` tick.

пример:
`companion = get_companion()
if companion != None:
	print(companion)`
@code_tooltip_unlock = `unlock(unlock)` 
Имеет точно такой же эффект, как нажатие кнопки, соответствующей `unlock` в дереве исследований.

возвращает `True` в случае успеха, иначе `False`.

занимает `200` ticks в случае успеха, иначе `1` tick.

пример:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
Используется для проверки, открыто ли уже улучшение, entity, земля или предмет.

возвращает `1` плюс количество раз, когда `thing` было улучшено, если `thing` улучшаемый. Иначе возвращает `1`, если `thing` открыт, и `0` в противном случае.

занимает `1` tick.

пример:
`plant(Entities.Bush)
n_substance = get_world_size() * num_unlocked(Unlocks.Mazes)
use_item(Items.Weird_Substance, n_substance)`
@code_tooltip_reset = `reset()` 
Сбрасывает ферму до квадрата 1x1, удаляет все ресурсы и блокирует большинство улучшений.
Это не удаляет ваш код.

возвращает `None`

занимает `200` ticks.

пример:
`reset()`
@code_tooltip_measure = `measure(direction = None)` 
Может измерять некоторые значения у некоторых entity. Эффект зависит от entity.

Если `direction` не `None`, измеряет соседнее entity в указанном направлении.

возвращает количество лепестков у подсолнуха.
возвращает следующую позицию для сокровища или яблока.
возвращает размер кактуса.
возвращает загадочное число для тыквы.
возвращает `None` для всех остальных entity.

занимает `1` tick.

пример:
`num_petals = measure()`
@code_tooltip_leaderboard_run = `leaderboard_run(leaderboard, file_name, speedup)`
Запускает симуляцию на время для `leaderboard`, используя указанный `file_name` в качестве отправной точки.
`speedup` устанавливает начальное ускорение.

возвращает `None`

занимает `200` ticks.

пример:
`leaderboard_run(Leaderboards.Fastest_Reset, "full_run", 256)`
@code_tooltip_simulate = `simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
Запускает симуляцию для leaderboard, используя указанный `filename` в качестве отправной точки.

`sim_unlocks`: Последовательность, содержащая начальные улучшения.
`sim_items`: dict, сопоставляющий предметы с их количеством. Симуляция начинается с этими предметами.
`sim_globals`: dict, сопоставляющий имена переменных со значениями. Симуляция начинается с этими переменными в глобальной области видимости (scope).
`seed`: Случайное начальное число (seed) симуляции. Должно быть положительным целым числом.
`speedup`: Начальное ускорение.

возвращает время, которое потребовалось для запуска симуляции.

занимает `200` ticks.

пример:
`filename = "f1"
sim_unlocks = Unlocks
sim_items = {Items.Carrot : 10000, Items.Hay : 50}
sim_globals = {"a" : 13}
seed = 0
speedup = 64

run_time = simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
@code_tooltip_spawn_drone = `spawn_drone(filename)`
Запускает новый дрон на той же позиции, что и дрон, выполнивший команду `spawn_drone(function)`. Новый дрон затем начинает выполнять указанную функцию. После завершения он автоматически исчезнет.

возвращает идентификатор нового дрона или `None`, если все дроны уже запущены.

занимает `200` ticks, если дрон был запущен, иначе `1`.

пример:
`def harvest_column():
    for _ in range(get_world_size()):
        harvest()
        move(North)

while True:
    if spawn_drone(harvest_column):
        move(East)`

@code_tooltip_wait_for = `wait_for(drone)`
Ожидает завершения работы указанного `drone`.

возвращает значение, которое вернула функция, выполнявшаяся `drone`.

занимает `1` tick, если ожидаемый `drone` уже завершил работу.

пример:
`def get_entity_type_in_direction(dir):
    move(dir)
    return get_entity_type()

def zero_arg_wrapper():
    return get_entity_type_in_direction(North)
handle = spawn_drone(zero_arg_wrapper)
print(wait_for(handle))`

@code_tooltip_max_drones = `max_drones()`

возвращает максимальное количество дронов, которое вы можете иметь на ферме.

занимает `1` tick.

пример:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`

@code_tooltip_num_drones = `num_drones()`

возвращает текущее количество дронов на ферме.

занимает `1` tick.

пример:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`

@code_tooltip_quick_print = `quick_print(*args)`
Выводит значение так же, как `print(*args)`, но не останавливается, чтобы написать его в воздухе, поэтому его можно найти только на странице вывода.

возвращает `None`

занимает `0` ticks.

пример:
`quick_print("hi mom")`
@code_tooltip_change_hat = `change_hat(hat)`
Меняет шляпу дрона на `hat`.

возвращает `None`

занимает `200` ticks.

пример:
`change_hat(Hats.Dinosaur_Hat)`

@code_tooltip_max = `max(*args)`
Находит максимум из последовательности элементов или нескольких переданных аргументов.
Может использоваться с числами и строками.

`max(a,b,c)`: Возвращает максимум из `a`, `b` и `c`.
`max(sequence)`: Возвращает максимум из всех значений в последовательности.

занимает #сравнений ticks.

пример:
`max([3,6,34,16])`
@code_tooltip_min = `min(*args)`
Находит минимум из последовательности элементов или нескольких переданных аргументов.
Может использоваться с числами и строками.

`min(a,b,c)`: Возвращает минимум из `a`, `b` и `c`.
`min(sequence)`: Возвращает минимум из всех значений в последовательности.

занимает #сравнений ticks.

пример:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
Вычисляет абсолютное значение (модуль) числа.

возвращает `number`, если `number` положительное, и `-number` в противном случае.

занимает 1 tick.

пример:
`abs(-69)`
@code_tooltip_random = `random()`
Выбирает случайное число от 0 (включительно) до 1 (не включительно).

возвращает случайное число.

занимает `1` tick.

пример:
`def random_elem(list):
	index = random() * len(list) // 1
	return list[index]`
@code_tooltip_append = `list.append(element)` 
Добавляет `element` в конец `list`.

возвращает `None`

занимает `1` tick.

пример:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)` 
Добавляет `element` в `set`.

возвращает `None`

занимает ticks, равное размеру элемента.

пример:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)` 
Удаляет первое вхождение `element` из `collection`.

возвращает `None`

занимает ticks, равное размеру элемента, для set, и #сравнений + #сдвигов ticks для list.

пример:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()` 
Удаляет последний элемент из list или указанный элемент из dict.
`list.pop(i)` удаляет элемент по индексу `i` из `list`.

возвращает удалённый элемент

занимает ticks, равное размеру ключа, для dict, и `len(list) - i + 1` ticks для list.

пример:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)` 
Вставляет `element` в `list` по индексу `i`.

возвращает `None`

занимает `len(list) - i + 1` ticks.

пример:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = Содержит все предметы, которые могут быть в инвентаре. Можно перебирать с помощью цикла `for`.
@code_tooltip_Entities = Содержит все типы растений. Можно перебирать с помощью цикла `for`.
@code_tooltip_Grounds = Содержит все возможные типы почвы. Можно перебирать с помощью цикла `for`.
@code_tooltip_Unlocks = Содержит все улучшения и апгрейды из меню исследований. Можно перебирать с помощью цикла `for`.
@code_tooltip_Hats = Содержит все типы шляп. Можно перебирать с помощью цикла `for`.
@code_tooltip_Leaderboards = Содержит все категории leaderboard. Можно перебирать с помощью цикла `for`.
@code_tooltip_for = Цикл, который перебирает все элементы последовательности. В некоторых языках программирования его называют циклом "foreach".
@code_tooltip_while = Цикл выполняется, пока условие ложно.
@code_tooltip_def = Определяет функцию.
@code_tooltip_True = Логическое значение, которое всегда истинно.
@code_tooltip_False = Логическое значение, которое всегда ложно.
@code_tooltip_if = Выполняет код, если условие `True`.
@code_tooltip_else = Выполняет код, если предыдущее условие `if` было `False`.
@code_tooltip_elif = Делает то же самое, что и:
`else:
    if condition:`
@code_tooltip_None = Значение, представляющее отсутствие значения.
@code_tooltip_continue = Немедленно переходит к следующей итерации цикла. Если есть вложенные циклы, это всегда повлияет на самый внутренний цикл.
@code_tooltip_break = Выходит из цикла и продолжает выполнение инструкций после цикла. Если есть вложенные циклы, это всегда повлияет на самый внутренний цикл.
@code_tooltip_North = Направление вверх на экране. Если вы не перевернёте экран.
@code_tooltip_East = Направление вправо на экране. Если вы не перевернёте экран.
@code_tooltip_South = Направление вниз на экране. Если вы не перевернёте экран.
@code_tooltip_West = Направление влево на экране. Если вы не перевернёте экран.
@code_tooltip_not = `not True` это `False`, а `not False` это `True`.
@code_tooltip_and = Вычисляет первый операнд. Если он ложный (`False`, `0` и пустые коллекции), он немедленно возвращает это значение (сокращённое вычисление), в противном случае он вычисляет и возвращает второй операнд.
@code_tooltip_or = Вычисляет первый операнд. Если он истинный (всё, кроме `False`, `0` и пустых коллекций), он немедленно возвращает это значение (сокращённое вычисление), в противном случае он вычисляет и возвращает второй операнд.
@code_tooltip_return = Используется для возврата значения из функции.
@code_tooltip_pass = Ничего не делает. Может быть полезно, потому что пустые блоки кода не допускаются.