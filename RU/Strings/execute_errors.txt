@error_code_after_block = Здесь не должно быть кода. Попробуйте удалить его или перенести на новую строку.
@error_wrong_number_args = {0} принимает {1} аргументов.
@error_expected_no_args = {0} не принимает аргументов.
@error_wrong_args = {0}-й аргумент {1} был {2}. Это неверный аргумент.
@error_syntax_error_in_import = Импортированный модуль содержит синтаксическую ошибку.
@error_module_not_found = Модуль с таким именем не существует. Имя должно совпадать с именем файла. Это имя, отображаемое в верхней части окна.
@error_list_element_not_found = {0} не является элементом в list.
@error_set_element_not_found = {0} не является элементом set.
@error_index_out_of_bounds = Индекс {0} находится за пределами list {1}.
@error_index_out_of_bounds2 = Индекс находится за пределами list.
@error_arith_assign_not_used_on_number = {0} можно использовать только с числами.
@error_bool_op_not_used_on_bool = Логический оператор можно использовать только с булевыми выражениями, которые вычисляются как `True` или `False`.
@error_bad_bin_operator = Оператор {0} не может быть использован с операндами {1} и {2}.
@error_bad_unary_operator = Оператор {0} не может быть использован с {1}.
@error_index = {0} не может использоваться как индекс для {1}.
@error_index_on_non_indexable = Нельзя индексировать {0}.
@error_zero_step = Размер шага не может быть нулевым.
@error_index_on_tuple = Нельзя присвоить значение элементу кортежа (tuple), потому что кортежи неизменяемы.
@error_bad_key = {0} не может использоваться как ключ.
@error_slice_dict = Нельзя делать срезы (slice) у dict.
@error_key = {0} не является ключом в dict.
@error_condition_not_bool = {0} не является допустимым условием. Условие должно быть логическим значением. Это означает, что оно должно быть выражением, которое всегда либо `True`, либо `False`.
@error_for_requires_iterable = {0} не может быть перебран в цикле for. Циклу for должна быть передана последовательность для перебора. Пример:

`for i in range(5):`
Здесь range(5) возвращает последовательность `0,1,2,3,4`.
@error_no_loop_to_break = `break` можно использовать только внутри цикла.
@error_no_loop_to_continue = `continue` можно использовать только внутри цикла.
@error_no_function_to_return_from = `return` можно использовать только внутри функции.
@error_missing_unlock = Это должно быть открыто, прежде чем его можно будет использовать.
@error_missing_x_unlock = {0} должен быть открыт, прежде чем это можно будет использовать.
@error_name_not_defined = {0} не была определена. Вы должны присвоить значение переменной перед её использованием.
@error_missing_import = {0} не была определена. Похоже, она определена в файле {1}. Вы забыли его импортировать? 
Если вы его импортировали, у вас, вероятно, есть цикл импорта (см. страницу документации по импорту).
@error_missing_import_before_unlock = {0} не была определена. Похоже, она определена в файле {1}. Вы должны разблокировать импорт, чтобы иметь возможность импортировать вещи из других файлов.
@error_call_before_def = {0} не определена. Похоже, она определена где-то в этом файле, но определение ещё не было выполнено. Функции можно вызывать только после инструкции `def`.
@error_not_a_function = Вы попытались вызвать то, что не является функцией. Распространённая ошибка, которая может вызвать это, — наличие переменной с тем же именем, что и функция.
@error_invalid_const = {0} не существует.
@error_invalid_const2 = Этого не существует.
@error_max_stack_size_reached = Достигнут максимальный размер call stack. Скорее всего, это связано со слишком большим количеством рекурсивных вызовов функций.
@error_max_comparison_depth = Достигнута максимальная глубина сравнения. Это может произойти, например, если вы сравниваете списки (list), которые содержат сами себя.
@error_assign_type_mismatch = Левая часть присваивания не соответствует правой.
@error_too_many_values_to_unpack = Правая часть не содержит достаточного количества значений для распаковки.
@error_not_enough_values = Правая часть содержит слишком много значений для распаковки в левую.
@error_empty_print = `print()` требует хотя бы одного аргумента.
@error_in_string = Невозможно проверить, находится ли {0} в строке.
@error_collection_changed_size_during_iteration = Размер этой коллекции не может быть изменён внутри цикла for, который её перебирает. Это связано с тем, что изменение размера коллекции сделало бы недействительным объект итератора, который использует цикл for.
@error_wrong_use_of_max = Не могу вычислить максимум для {0}.
@error_wrong_use_of_min = Не могу вычислить минимум для {0}.
@error_function_as_condition = Попытка проверить, является ли функция {0} истинной (`True`). Это сам объект функции, а не её возвращаемое значение. Возможно, вы хотели вызвать функцию с помощью оператора вызова `()`? 

В Python объекты функций истинны, то есть, если использовать их в качестве условий, они работают как `True`, поэтому Python не выдал бы вам это сообщение об ошибке. 

Это защитное сообщение об ошибке, вы можете отключить его в настройках, если оно вам мешает.
@error_function_in_operator = Попытка использовать {1} для функции {0}. Это сам объект функции, а не её возвращаемое значение. Возможно, вы хотели вызвать функцию с помощью оператора вызова `()`? 

Это защитное сообщение об ошибке, вы можете отключить его в настройках, если оно вам мешает.
@error_zero_step_size = Размер шага не может быть 0.
@error_sequence_too_large = Последовательность была слишком большой для копирования.
@error_invalid_sim_unlocks = Начальные улучшения были неверными. Это должна быть последовательность улучшений или кортежей (tuple) вида `(Unlock.Carrots, 3)`.
@error_invalid_sim_items = Начальные предметы были неверными. Это должен быть dict, сопоставляющий предметы с числами, например `{Items.Hay : 100}`.
@error_invalid_sim_globals = Начальные глобальные переменные были неверными. Это должен быть dict, сопоставляющий имена переменных со значениями, например `{"x" : 42}`.
@error_division_by_zero = О нет! Вы разделили на `0`. Вы едва выжили.
@error_negative_use_item = Количество используемых предметов должно быть не менее `1`. Было {0}.
@error_use_before_assign = Попытка прочитать переменную {0} до того, как ей было присвоено значение. 
Если вы хотите изменить глобальную переменную, вы должны использовать ключевое слово global, чтобы писать в глобальный scope.

`global x
x += 1`
@error_attribute_on_non_module = Вы не можете присвоить атрибут {0}.
@error_file_not_found = Файл {0} не существует.
@error_max_drones_reached = Превышен лимит дронов.
@error_dino_hat_already_used = Есть только одна шляпа динозавра, и она уже используется. Вы не можете использовать её на втором дроне.
@error_invalid_drone_id = Нет дрона с ID {0}.